
–ü—Ä–æ Anemic Domain Model
=======================

.. post:: Jan 04, 2018
   :language: ru
   :tags: ORM, DataMapper, DB, SQL, Model, DDD, Repository
   :category:
   :author: Ivan Zakrevsky


–í—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫—Ä—É–≥—É –º–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–º, —á—Ç–æ Anemic Domain Model - –Ω–∏–∫–∞–∫–æ–π –≤–æ–≤—Å–µ –∏ –Ω–µ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω, –∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é "The Anaemic Domain Model is no Anti-Pattern, it‚Äôs a SOLID design" [#fnadminapen]_.
–ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏ —è —Ä–µ—à–∏–ª –æ–± —ç—Ç–æ–º –Ω–∞–ø–∏—Å–∞—Ç—å.

–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–π –≤–Ω–∏–∑—É —Å—Ç–∞—Ç—å–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–∏–≥—É Martin, Robert C. "Agile software development: principles, patterns, and practices." Prentice Hall PTR, 2003. –≠—Ç–∞ –∫–Ω–∏–≥–∞ –¥–∞–µ—Ç, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –ª—É—á—à–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—é—Ç –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞: `–æ–Ω–∏ –í–Ω–µ–¥—Ä—è—é—Ç –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Dependency Injection) <https://youtu.be/TMuno5RZNeE?t=33m30s>`__, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º.

–Ø –Ω–µ –¥—É–º–∞—é, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Dependency Injection) –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å –ø—è—Ç–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É "D" –≤ SOLID (–ø–æ—Å–∫–æ–ª—å–∫—É `DI —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ DIP <https://sergeyteplyakov.blogspot.com/2014/11/di-vs-dip-vs-ioc.html>`__), –∞ –ª–∏—à–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è `–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ <https://en.wikipedia.org/wiki/Multiple_dispatch>`__) –±—É–¥–µ—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ—Ç—å–µ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É "L" –≤ SOLID.
–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–Ω–µ–¥—Ä—è—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –ø—Ä–∏–¥–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—É—é.

    üìù The fact that the boundaries are not visible during the deployment of a monolith does not mean that they are not present and meaningful.
    Even when statically linked into a single executable, the ability to independently develop and marshal the various components for final assembly is immensely valuable.

    Such architectures almost always depend on some kind of **dynamic polymorphism to manage their internal dependencies**.
    **This is one of the reasons that object-oriented development has become such an important paradigm in recent decades.**
    Without OO, or an equivalent form of polymorphism, architects must fall back on the dangerous practice of using pointers to functions to achieve the appropriate decoupling.
    Most architects find prolific use of pointers to functions to be too risky, so they are forced to abandon any kind of component partitioning.

    \- "Clean Architecture: A Craftsman‚Äôs Guide to Software Structure and Design" by Robert C. Martin

–ù—É–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ –º–Ω–æ–≥–∏–µ –Ω–∞—á–∏–Ω–∞—é—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞—á–∞—Å—Ç—É—é –Ω–µ –ø—Ä–æ–≤–æ–¥—è —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–º.
–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—Ç–∏–ª –†–æ–±–µ—Ä—Ç –ú–∞—Ä—Ç–∏–Ω –≤ —Å—Ç–∞—Ç—å—è—Ö "`OO vs FP <http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html>`__" (2014) –∏ "`FP vs. OO <https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html>`__" (2018).

–í—Å–µ –¥–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–æ—á–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, —Ç.–µ. –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.
–ê –º–µ–∂–¥—É —Ç–µ–º, –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É—Ç—Ä–∞—Ç—ã –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –≤ Anaemic Domain Model –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ –≤ —É—Ç—Ä–∞—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    üìù "OO makes code understandable by encapsulating moving parts. FP makes code understandable by minimizing moving parts."
    -- `Michael Feathers <https://twitter.com/mfeathers/status/29581296216>`__

–û–±–µ –ø–∞—Ä–∞–¥–∏–≥–º—ã, –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –∏ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —Ä–µ—à–∞—é—Ç –≤–æ–ø—Ä–æ—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é (Essential Complexity) –ø—Ä–æ–≥—Ä–∞–º–º—ã, –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏.

    üìù "Brooks argues that software development is made difficult because of two different classes of problems‚Äîthe essential and the accidental. In referring to these two terms, Brooks draws on a philosophical tradition going back to Aristotle. In philosophy, the essential properties are the properties that a thing must have in order to be that thing. A car must have an engine, wheels, and doors to be a car. If it doesn't have any of those essential properties, it isn't really a car.

    Accidental properties are the properties a thing just happens to have, properties that don't really bear on whether the thing is what it is. A car could have a V8, a turbocharged 4-cylinder, or some other kind of engine and be a car regardless of that detail. A car could have two doors or four; it could have skinny wheels or mag wheels. All those details are accidental properties. You could also think of accidental properties as incidental, discretionary, optional, and happenstance.

    <...>

    As Dijkstra pointed out, modern software is inherently complex, and no matter how hard you try, you'll eventually bump into some level of complexity that's inherent in the real-world problem itself. This suggests a two-prong approach to managing complexity:

    - **Minimize the amount of essential complexity that anyone's brain has to deal with at any one time.**
    - Keep accidental complexity from needlessly proliferating."

    <...>

    Abstraction is the ability to engage with a concept while safely ignoring some of its details‚Äîhandling different details at different levels. Any time you work with an aggregate, you're working with an abstraction. If you refer to an object as a "house" rather than a combination of glass, wood, and nails, you're making an abstraction. If you refer to a collection of houses as a "town," you're making another abstraction.

    <...>

    From a complexity point of view, the principal benefit of abstraction is that it allows you to ignore irrelevant details. Most real-world objects are already abstractions of some kind. As just mentioned, a house is an abstraction of windows, doors, siding, wiring, plumbing, insulation, and a particular way of organizing them. A door is in turn an abstraction of a particular arrangement of a rectangular piece of material with hinges and a doorknob. And the doorknob is an abstraction of a particular formation of brass, nickel, iron, or steel.

    <...>

    Encapsulation picks up where abstraction leaves off. Abstraction says, "You're allowed to look at an object at a high level of detail." Encapsulation says, "Furthermore, you aren't allowed to look at an object at any other level of detail."

    -- "Software Estimation: Demystifying the Black Art (Developer Best Practices)" by Steve McConnell

..

    üìù "Following Aristotle, I divide them [difficulties] into essence - the difficulties inherent in the nature of the software - and accidents - those difficulties that today attend its production but that are not inherent.

    <...>

    The complexity of software is in essential property, not an accidental one.
    Hence descriptions of a software entity that **abstract away its complexity often abstract away its essence**.
    Mathematics and the physical sciences made great strides for three centuries by constructing simplified models of complex phenomena, deriving properties from the models, and verifying those properties experimentally.
    This worked because the complexities ignored in the models were not the essential properties of the phenomena.
    It does not work when the complexities are the essence."

    -- "No Silver Bullet - Essence and Accident in Software Engineering" by Frederick P. Brooks, Jr.

–ù—É–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å Anemic Domain Model –≤ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞—Ä–∞–¥–∏–≥–º–µ –æ—Ç Data Type –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞—Ä–∞–¥–∏–≥–º–µ.
–í–æ—Ç `–∑–¥–µ—Å—å <https://youtu.be/dnUFEg68ESM?t=3085>`_, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∞–º Eric Evans –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤ —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ "Domain-Driven Design" –æ–Ω –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª –≥–ª—É–±–æ–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–∞—Ä–∞–¥–∏–≥–º—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ 2003 –æ–Ω–∞ –Ω–µ –∏–º–µ–ª–∞ —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è.
–ê —Å–µ–≥–æ–¥–Ω—è, –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Event Sourcing, –æ–Ω–∞ –∏–º–µ–µ—Ç —É–∂–µ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

    üìù You know, functional is a big thing.
    Maybe more than one thing.
    And so there are people though who have been talking about modeling in the functional realm and very interesting things.
    The things is models are just systems of abstraction.
    And so you have a powerful mechanism for abstraction.
    You should be able to implement, you should be able to express models.
    Furthermore, if you want to, you know, bring that ubiquitous language to life in the code, well, some of the functional languages, I think, are really nice for making making language in the code.
    And it might be a good mate with Event Sourcing.
    I'm just sort of laying out like I'm pointing out that we have so many options.
    Options that were really not there in 2003.

    \- Eric Evans, "`Tackling Complexity in the Heart of Software <https://youtu.be/dnUFEg68ESM?t=3085>`__", Domain-Driven Design Europe 2016 - Brussels, January 26-29, 2016

`–ó–¥–µ—Å—å <https://www.infoq.com/interviews/Technology-Influences-DDD/>`__ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É.
–ê `–∑–¥–µ—Å—å <https://vimeo.com/131636650>`__ Greg Young —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç OOP –∫ Functional Programming –≤ Event Sourcing.

–ü–æ–¥ Anemic Domain Model –∂–µ –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã—Ä–æ–∂–¥–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–º–µ–Ω–Ω–æ –≤ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞—Ä–∞–¥–∏–≥–º–µ, —Ç.–µ. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–º —Å—Ç–∏–ª–µ.

–¢–∞–∫–∂–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å Anemic Domain Model –æ—Ç `ViewModel <https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice#layers-in-ddd-microservices>`__, –∏–±–æ ViewModel –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (–∞ –∏–º–µ–Ω–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è —Å—É—Ç—å—é –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω–∞ Anemic Domain Model), –∏ —á–∞—Å—Ç–æ `–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ CQRS <https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/cqrs-microservice-reads>`__.

–ù–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –æ–±—Å—É–∂–¥–∞–µ–º–æ–π —Å—Ç–∞—Ç—å–µ.
–Ø —Ç–∞–∫ –∏ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Ç–æ–π —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–æ–º —Å–∞–π—Ç–µ.
–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –∫–∞–∫-—Ç–æ –º–æ–≥–ª–æ –±—ã –ø–æ–¥–Ω—è—Ç—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä–∞—è —Å —Ç–∞–∫–æ–π –ª–µ–≥–∫–æ—Å—Ç—å—é –±–µ—Ä–µ—Ç—Å—è –æ–ø—Ä–æ–≤–µ—Ä–≥–∞—Ç—å —Å—Ç–∞—Ç—å—é "`Anemic Domain Model <https://www.martinfowler.com/bliki/AnemicDomainModel.html>`__" by Martin Fowler.
–ó–∞—Ç–æ —è –Ω–µ—Ä–µ–¥–∫–æ –Ω–∞–±–ª—é–¥–∞–ª –ø–æ–¥–æ–±–Ω—ã–π –ø—Ä–∏—ë–º —Å —Ü–µ–ª—å—é –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å—É, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–¥–∞–ª—å–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.

–Ø –Ω–µ –Ω–∞–±–ª—é–¥–∞—é –≤ —Å—Ç–∞—Ç—å–µ —á–µ—Ç–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–º —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É:

#. –õ–æ–≥–∏–∫–æ–π —É—Ä–æ–≤–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#. –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π (–ø—Ä–∏—á–µ–º, —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏, –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
#. –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º (—á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π), –∏–Ω–æ–≥–¥–∞ –∏–º–µ–Ω—É–µ–º–æ–π —Å–ª–æ–µ–º –¥–∞–Ω–Ω—ã—Ö

–í –ø—Ä–∏–º–µ—Ä–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ - –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º (–¥–∞ –µ—â–µ –∏ –≤ –≤–∏–¥–µ Active Record).
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Å–ø–∏—Å–∫–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏ –Ω–µ—Ç –¥—Ä—É–≥–æ–π –∫–Ω–∏–≥–∏ Robert C. Martin - "Clean Code", –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –≤–æ—Ç —É–∂–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è :ref:`Cross-Cutting Concerns <domain-model-relationship-implementing-aop-ru>`.

–í—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, —á—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ—Ç–∏–≤ –Ω–µ –Ω–∞–¥–µ–ª—è—Ç—å –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏–º–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏ - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∞ –≤—Å—É–Ω—É—Ç—å –≤ –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–ª–æ—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º.
–ö —Ç–æ–º—É –∂–µ Service Layer –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ Application Logic, —Ç.–µ. –∏–º–µ–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è, –Ω–µ–∂–µ–ª–∏ Domain Logic.
–ê :ref:`—É Domain Service –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è <domain-service-ru>`.

–í —Å—Ç–∞—Ç—å–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –Ω–µ–≤–µ—Ä–Ω–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ Single Responsibility Principle (SRP), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç "–¥–µ–ª–∞—Ç—å –æ–¥–Ω—É –≤–µ—â—å".

–í —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ Clean Architecture, Robert C. Martin –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ —Å–æ–∂–∞–ª–µ–µ—Ç, —á—Ç–æ –≤—ã–±—Ä–∞–ª —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (SRP):

    üìù "Of all the SOLID principles, the **Single Responsibility Principle (SRP) might be the least well understood**. That‚Äôs likely because it has a particularly **inappropriate name**.
    It is too easy for programmers **to hear the name and then assume that it means that every module should do just one thing**.

    Make no mistake, there is a principle like that. A function should do one, and only one, thing. We use that principle when we are refactoring large functions into smaller functions; we use it at the lowest levels. **But it is not one of the SOLID principles‚Äîit is not the SRP.**

    Historically, the SRP has been described this way:

    **A module should have one, and only one, reason to change.**

    Software systems are changed to satisfy users and stakeholders; those users and stakeholders are the ‚Äúreason to change‚Äù that the principle is talking about. Indeed, we can rephrase the principle to say this:

    A module should be responsible to one, and only one, user or stakeholder.

    Unfortunately, the words ‚Äúuser‚Äù and ‚Äústakeholder‚Äù aren‚Äôt really the right words to use here. There will likely be more than one user or stakeholder who wants the system changed in the same way. Instead, we‚Äôre really referring to a group‚Äîone or more people who require that change. We‚Äôll refer to that group as an actor.

    Thus the final version of the SRP is:

    A module should be responsible to one, and only one, actor.

    Now, what do we mean by the word ‚Äúmodule‚Äù? The simplest definition is just a source file. Most of the time that definition works fine. Some languages and development environments, though, don‚Äôt use source files to contain their code. In those cases a module is just a cohesive set of functions and data structures.

    That word ‚Äúcohesive‚Äù implies the SRP. Cohesion is the force that binds together the code responsible to a single actor.

    Perhaps the best way to understand this principle is by looking at the symptoms of violating it..."

    -- "Clean Architecture: A Craftsman‚Äôs Guide to Software Structure and Design" by Robert C. Martin

–í –∫–Ω–∏–≥–µ "Agile Software Development. Principles, Patterns, and Practices." by Robert C. Martin, James W. Newkirk, Robert S. Koss, –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–µ "`Principles Of OOD <http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod>`__" by Robert C. Martin, –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ "`The Single Responsibility Principle <http://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html>`__" by Robert C. Martin, SRP –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–∑ –ø–æ–Ω—è—Ç–∏–π `Coupling and Cohesion <https://wiki.c2.com/?CouplingAndCohesion>`__ of Constantine's Law.
–í —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ –≤ –æ–±—Å—É–∂–¥–∞–µ–º–æ–π —Å—Ç–∞—Ç—å–µ Cohesion —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.

–í—Å—è —ç—Ç–∞ –Ω–µ—Ä–∞–∑–±–µ—Ä–∏—Ö–∞ –∑–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è Rich Domain Model, —á—Ç–æ –≤–≤–æ–¥–∏—Ç —á–∏—Ç–∞—Ç–µ–ª—è –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–∫–æ–π –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Domain Model.
–ù–∏–∫–∞–∫–∏—Ö Rich Domain Model –Ω–µ—Ç.
–ï—Å—Ç—å Domain Model (–æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏—Ä—É—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞ (–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏)), –∞ –µ—Å—Ç—å Anemic Domain Model (—Ç.–µ. —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–µ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è).

–í —Ü–µ–ª–æ–º, –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ—Ç–∏–≤ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–∫–æ–≤ Anemic Domain Model —Å–≤–æ–¥–∏—Ç—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ, –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª—É–∂–µ–±–Ω–æ–π –õ–æ–≥–∏–∫–∏ –î–æ—Å—Ç—É–ø–∞ –∫ –î–∞–Ω–Ω—ã–º –∏ –ë–∏–∑–Ω–µ—Å-–õ–æ–≥–∏–∫–∏ –î–æ–º–µ–Ω–Ω–æ–π –ú–æ–¥–µ–ª–∏.
–ü–æ—ç—Ç–æ–º—É, –æ–Ω–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å—é –ë–∏–∑–Ω–µ—Å-–õ–æ–≥–∏–∫—É –∏–∑ –î–æ–º–µ–Ω–Ω–æ–π –ú–æ–¥–µ–ª–∏ –∫ —Å–ª—É–∂–µ–±–Ω–æ–π –ª–æ–≥–∏–∫–µ –≤ –°–µ—Ä–≤–∏—Å—ã.
–ù—É... —Ö–æ—Ä–æ—à–æ... –∞ –≤ –°–µ—Ä–≤–∏—Å–∞—Ö –Ω–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª–∏—Ç–∏–∫–∏?
–ü–æ–ª—É—á–∞—é—Ç—Å—è —Ç–µ –∂–µ —è–π—Ü–∞, —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–º —Å—Ç–∏–ª–µ.
–û—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ—Å—Ç —Å–ª–∞–≥–∞–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è.

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ü–µ–Ω–æ–π —É—Ç—Ä–∞—Ç—ã –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –¥–æ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, - —ç—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø–æ—Å–∫–æ–ª—å–∫—É —Å–µ—Ä–≤–∏—Å —É—Ä–æ–≤–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–ª–∏—Ç–∏–∫–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –æ–±–ª–∞–¥–∞—é—â–µ–≥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏.
–í —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ –¥–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (–≤ —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Lazy Loading) - –Ω–µ –º–æ–∂–µ—Ç.
–ù–æ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å Essential Complexity, —á—Ç–æ –∏–º–µ–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á–µ–º Accidental Complexity.

–ì–ª–∞–≤–Ω—ã–π –∏–º–ø–µ—Ä–∞—Ç–∏–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é.
–ù–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ–≥–æ Spaghetti-code –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–º—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–∏–ª–∏–π.

    üìù "—Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∏–Ω–æ–≥–¥–∞ –≤–æ –º–Ω–æ–≥–æ —Ä–∞–∑ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º —Å–ª–æ–∂–Ω–æ–µ."

    -- –ú.–¢. –ö–∞–ª–∞—à–Ω–∏–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É –≥–∞–∑–µ—Ç—ã ¬´Metro –ú–æ—Å–∫–≤–∞¬ª, 2009 –≥–æ–¥.

..

    üìù "–£—Å–ª–æ–∂–Ω—è—Ç—å - –ø—Ä–æ—Å—Ç–æ, —É–ø—Ä–æ—â–∞—Ç—å - —Å–ª–æ–∂–Ω–æ".

    -- "–ó–∞–∫–æ–Ω –ú–µ–π–µ—Ä–∞"

–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ä–µ—à–∞—Ç—å, –∞ –Ω–µ –∑–∞–º—ã–∫–∞—Ç—å—Å—è –æ—Ç –Ω–∏—Ö (—Å–º. `–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞—â–∏—Ç–∞ <https://ru.m.wikipedia.org/wiki/%D0%97%D0%B0%D1%89%D0%B8%D1%82%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%B7%D0%BC>`__).

–ú–Ω–µ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ú–∞—Ä—Ç–∏–Ω—É –§–∞—É–ª–µ—Ä—É —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –≥–∏–±–∫–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∞ –∑–Ω–∞—á–∏—Ç, –µ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
–ú–∞—Ä—Ç–∏–Ω –§–∞—É–ª–µ—Ä `–æ—Ç–≤–µ—Ç–∏–ª <https://youtu.be/VjKYO6DP3fo?t=16m11s>`__, —á—Ç–æ –µ—Å–ª–∏ —Å—Ö–µ–º—É –±–∞–∑—ã —Å–ª–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∑–Ω–∞—á–∏—Ç –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–æ—â–µ.
–¢–∞–∫ –ø–æ—è–≤–∏–ª—Å—è –º–µ—Ö–∞–Ω–∏–∑–º –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ–π Agile-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.

–í—Å–µ —á—Ç–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ª–æ–≥–∏–∫–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, - —ç—Ç–æ –Ω–æ–≤–∞—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã Domain Model, –∏–ª–∏, –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ Domain Model —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –≤–∏–¥–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Active Record (–∫–∞–∫ –≤ —Ç–æ–π —Å—Ç–∞—Ç—å–µ).

–û—á–µ–Ω—å —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å —Ä–∞–∑–±—É—Ö—à–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –Ω–µ—Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –µ–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, –≤ —Ç.—á. –∏ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –∏ —Ç.–ø.).
Domain Model –¥–æ–ª–∂–Ω–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞).
–ï—Å–ª–∏ Domain Model –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Å—è—Ç–∫–æ–≤ –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã—Ä–∞–∂–∞—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞, –Ω–µ –∏–º–µ—é—Ç –æ–±—â–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –∏—Ö —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞, –ª–∏–±–æ –≤ –∫–ª–∞—Å—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç Sevice Layer, –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Wrapper).
–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —ç—Ç–∞ —Ç–µ–º–∞ —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∞—Å—å –≤ —Å—Ç–∞—Ç—å–µ ":doc:`service-layer`".

–ï—â–µ –æ–¥–Ω–æ–π —á–∞—Å—Ç–æ–π –ø—Ä–∏—á–∏–Ω–æ–π –ø–æ—Ä–æ–∂–¥–µ–Ω–∏—è Anemic Domain Model —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `Domain Event <https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation>`__, –ª–∏–±–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.

Domain Model –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–∏–¥–µ –∞–≥—Ä–µ–≥–∞—Ç–∞, —Ç.–µ. –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è DDD –∏ NoSQL.
Domain Model –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–µ—Ç–æ–¥—ã, –∏–∑–º–µ–Ω—è—é—â–∏–µ –µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã –ø—Ä–∏—à–ª–∏ –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ NoSQL-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—É—á—à–µ, —á–µ–º RDBMS, –∏ —Ä–µ—à–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.
–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ IO-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º.
NoSQL —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –≤–æ–∫—Ä—É–≥ –∏–¥–µ–∏ –∞–≥—Ä–µ–≥–∞—Ç–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç, –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–µ—Ä–µ, –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.
–ì—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ NoSQL-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —è–≤–ª—è—é—Ç—Å—è –≥—Ä–∞–Ω–∏—Ü—ã –∞–≥—Ä–µ–≥–∞—Ç–∞.
–ï—Å–ª–∏ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–∞ —Å–∫—Ä—ã—Ç—ã –∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ Repository + DataMapper), —Ç–æ —Ç–∞–∫–æ–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∞–º–æ–π –î–æ–º–µ–Ω–Ω–æ–π –ú–æ–¥–µ–ª–∏.
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç IO-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç Single Responsibility Principle (—á—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –≤–∏–¥–µ Code Smell "Shotgun Surgery").

–ò–Ω–æ–≥–¥–∞ —Å–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –ë–∏–∑–Ω–µ—Å-–õ–æ–≥–∏–∫–∞ –î–æ–º–µ–Ω–Ω–æ–π –ú–æ–¥–µ–ª–∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ—Å—Ç—É–ø–µ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Å–≤—è–∑–∞–Ω–Ω–æ–π –î–æ–º–µ–Ω–Ω–æ–π –ú–æ–¥–µ–ª–∏, –∏–ª–∏ –¥–∞–∂–µ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–æ—Ä–Ω—é –¥—Ä—É–≥–æ–≥–æ –ê–≥—Ä–µ–≥–∞—Ç–∞.
–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (–ë–∏–∑–Ω–µ—Å-–õ–æ–≥–∏–∫–∏ –∏ –õ–æ–≥–∏–∫–∏ –î–æ—Å—Ç—É–ø–∞ –∫ –î–∞–Ω–Ω—ã–º) —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—é Anemic Domain Model.
–ú–µ–∂–¥—É —Ç–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—ã–π :ref:`—Ä—è–¥ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã <domain-model-relationship-ru>`.

–≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª–∞—Å—å –≤ —Å—Ç–∞—Ç—å—è—Ö:

- ":doc:`javascript-and-repository-pattern`"
- ":doc:`service-layer`"
- ":doc:`storm-orm`"

–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É:

- "`Domain model purity and lazy loading <https://enterprisecraftsmanship.com/posts/domain-model-purity-lazy-loading/>`__" by Vladimir Khorikov

–ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –ø–ª–æ—Ö–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã - —ç—Ç–æ –µ–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –∞ –Ω–µ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ –Ω–µ–µ.

–î–∞, –±—ã–≤–∞—é—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤.
–•–æ—Ä–æ—à–æ —ç—Ç—É —Ç–µ–º—É —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç Robert C. Martin –≤ –≥–ª–∞–≤–µ "Chapter 6: Objects and Data Structures :: Data/Object Anti-Symmetry" –∫–Ω–∏–≥–∏ "Clean Code: A Handbook of Agile Software Craftsmanship".
–ú–Ω–µ –ø–æ–ø–∞–¥–∞–ª–∞—Å—å –µ—â—ë —Å—Ç–∞—Ç—å—è –Ω–∞ —ç—Ç—É —Ç–µ–º—É: "`–ß—Ç–æ —Ç–∞–∫–æ–µ expression problem, –∏–ª–∏ –æ –¥—É–∞–ª–∏–∑–º–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è <https://ru.hexlet.io/blog/posts/expression-problem>`__" / –î–º–∏—Ç—Ä–∏–π –î–µ–º–µ–Ω—Ç–∏–π.
–ù–æ —ç—Ç–∞ —Ç–µ–º–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –ø—Ä–µ–¥–º–µ—Ç—É –æ–±—Å—É–∂–¥–∞–µ–º–æ–π —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–æ–º—É, –∫–∞–∫ –ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –û–±—ä–µ–∫—Ç–Ω–æ-–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Ç–∞–∫–æ–º —Å—Ç–∏–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω `Class Table Inheritance <https://martinfowler.com/eaaCatalog/classTableInheritance.html>`__ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–≥–∞—Ç–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π, –∏ –≤—ã –ø–æ–π–º–µ—Ç–µ –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ Anemic Domain Model.
–¢–æ –∂–µ —Å–∞–º–æ–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ –∫ —Å–ª—É—á–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ `Special Case <https://martinfowler.com/eaaCatalog/specialCase.html>`__, –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∞–∫–∂–µ –∫–∞–∫ –º–µ—Ç–æ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ `Introduce Null Object <https://www.refactoring.com/catalog/introduceNullObject.html>`__.
–°–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–∫–∂–µ `Replace Conditional with Polymorphism <https://www.refactoring.com/catalog/replaceConditionalWithPolymorphism.html>`__, `Replace Type Code With Polymorphism <https://www.refactoring.com/catalog/replaceTypeCodeWithPolymorphism.html>`__ –∏ `Replace Type Code with State/Strategy <https://www.refactoring.com/catalog/replaceTypeCodeWithStateStrategy.html>`__ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–Ω–∏–≥–µ, –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∫–∞–∑–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –æ–Ω–ª–∞–π–Ω-–∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º).

–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ:

- "`What is domain logic? <https://enterprisecraftsmanship.com/posts/what-is-domain-logic/>`__" by Vladimir Khorikov
- "`Domain services vs Application services <https://enterprisecraftsmanship.com/posts/domain-vs-application-services/>`__" by Vladimir Khorikov
- "`Domain model isolation <https://enterprisecraftsmanship.com/posts/domain-model-isolation/>`__" by Vladimir Khorikov
- "`Email uniqueness as an aggregate invariant <https://enterprisecraftsmanship.com/posts/email-uniqueness-as-aggregate-invariant/>`__" by Vladimir Khorikov
- "`How to know if your Domain model is properly isolated? <https://enterprisecraftsmanship.com/posts/how-to-know-if-your-domain-model-is-properly-isolated/>`__" by Vladimir Khorikov
- "`Domain model purity vs. domain model completeness <https://enterprisecraftsmanship.com/posts/domain-model-purity-completeness/>`__" by Vladimir Khorikov
- "`Domain model purity and lazy loading <https://enterprisecraftsmanship.com/posts/domain-model-purity-lazy-loading/>`__" by Vladimir Khorikov
- "`In Defense of Lazy Loading <https://enterprisecraftsmanship.com/posts/defense-lazy-loading>`__" by Vladimir Khorikov
- "`Domain model purity and the current time <https://enterprisecraftsmanship.com/posts/domain-model-purity-current-time/>`__" by Vladimir Khorikov
- "`Immutable architecture <https://enterprisecraftsmanship.com/posts/immutable-architecture/>`__" by Vladimir Khorikov
- "`Link to an aggregate: reference or Id? <https://enterprisecraftsmanship.com/posts/link-to-an-aggregate-reference-or-id/>`__" by Vladimir Khorikov

- "`How to create fully encapsulated Domain Models <https://udidahan.com/2008/02/29/how-to-create-fully-encapsulated-domain-models/>`__" by Udi Dahan

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Anemic Domain Model –≤ Domain Model:

- `Refactoring from Anemic Domain Model Towards a Rich One <https://github.com/vkhorikov/AnemicDomainModel>`__ by Vladimir Khorikov
- `Refactoring from anemic to rich Domain Model example <https://github.com/kgrzybek/refactoring-from-anemic-to-rich-domain-model-example>`__ by Kamil Grzybek

–í–∏–¥–µ–æ:

- `–î–æ–∫–ª–∞–¥ Vladimir Khorikov –ø—Ä–æ Anemic Domain Model <https://youtu.be/UlEmtTJUwtA?t=6075>`__

.. –í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–µ—Ä–µ, –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º–∞—è —Ç–µ–º–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏ –∫ —ç—Ç–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ \https://www.destroyallsoftware.com/talks/boundaries .

.. rubric:: Footnotes

.. [#fnadminapen] "The Anaemic Domain Model is no Anti-Pattern, it‚Äôs a SOLID design" \https://blog.inf.ed.ac.uk/sapm/2014/02/04/the-anaemic-domain-model-is-no-anti-pattern-its-a-solid-design/ (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π "–ê–Ω–µ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ ‚Äî –Ω–µ –∞–Ω—Ç–∏-—à–∞–±–ª–æ–Ω, –∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID" \https://habrahabr.ru/post/346016/ )
.. [#fnpoeaa] "Patterns of Enterprise Application Architecture" by Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford

.. update:: May 17, 2021
